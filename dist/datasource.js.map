{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":";;;;;;;;;;IAAa,oB,WAAA,oB;AACX,gCAAY,gBAAZ,EAA8B,EAA9B,EAAkC,UAAlC,EAA8C,WAA9C,EAA2D;AAAA;;AACzD,SAAK,GAAL,GAAW,iBAAiB,GAA5B;AACA,SAAK,CAAL,GAAS,EAAT;AACA,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,WAAL,GAAmB,WAAnB;AACD;;;;0BAEK,O,EAAS;AACb,UAAM,SAAS,KAAK,CAAL,CAAO,IAAP,CAAY,EAAZ,CAAf;;AAEA,UAAI,CAAC,MAAM,OAAN,CAAc,QAAQ,OAAtB,CAAD,IAAmC,QAAQ,OAAR,CAAgB,MAAhB,KAA2B,CAAlE,EAAqE;AACnE,eAAO,MAAP;AACD;;AAED,UAAM,SAAS,QAAQ,OAAR,CAAgB,CAAhB,EAAmB,MAAlC;;AAEA,UAAI,CAAC,MAAL,EAAa;AACX,eAAO,MAAP;AACD;;AAED,UAAM,QAAQ;AACZ,sBAAc,QAAQ,KAAR,CAAc,IAAd,CAAmB,MAAnB,EADF;AAEZ,oBAAY,QAAQ,KAAR,CAAc,EAAd,CAAiB,MAAjB;AAFA,OAAd;;AAKA,UAAM,cAAc,OAAO,IAAP,CAAY,KAAZ,EACjB,GADiB,CACb;AAAA,eAAO,MAAM,GAAN,GAAY,MAAM,GAAN,CAAnB;AAAA,OADa,EAEjB,IAFiB,CAEZ,GAFY,CAApB;;AAIA,aAAO,KAAK,UAAL,CACJ,iBADI,CACc;AACjB,aAAK,KAAK,GAAL,GAAW,WAAX,GAAyB,MAAzB,GAAkC,GAAlC,GAAwC;AAD5B,OADd,EAIJ,IAJI,CAIC,eAAO;AACX,eAAO;AACL,gBAAM,CACJ;AACE,0BADF;AAEE,wBAAY,IAAI,IAAJ,CAAS,OAAT,CAAiB,GAAjB,CAAqB,iBAAS;AACxC,qBAAO,CACL,KAAK,KAAL,CAAW,OAAO,MAAM,MAAN,CAAP,IAAwB,GAAnC,CADK,EAEL,IAAI,IAAJ,CAAS,MAAM,IAAf,EAAqB,OAArB,EAFK,CAAP;AAID,aALW;AAFd,WADI;AADD,SAAP;AAaD,OAlBI,CAAP;AAmBD;;;qCAEgB;AACf,aAAO,KAAK,UAAL,CACJ,iBADI,CACc;AACjB,aAAK,KAAK,GAAL,GAAW;AADC,OADd,EAIJ,IAJI,CAIC,oBAAY;AAChB,YAAI,SAAS,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,iBAAO,EAAE,QAAQ,SAAV,EAAqB,SAAS,wBAA9B,EAAwD,OAAO,SAA/D,EAAP;AACD;;AAED,eAAO;AACL,kBAAQ,OADH;AAEL,mBAAS,6BAA6B,SAAS;AAF1C,SAAP;AAID,OAbI,CAAP;AAcD;;;oCAEe,O,EAAS;AACvB,aAAO,QAAQ,OAAR,CAAgB,CACrB,EAAE,MAAM,KAAR,EAAe,OAAO,CAAtB,EADqB,EAErB,EAAE,MAAM,KAAR,EAAe,OAAO,CAAtB,EAFqB,EAGrB,EAAE,MAAM,MAAR,EAAgB,OAAO,CAAvB,EAHqB,EAIrB,EAAE,MAAM,KAAR,EAAe,OAAO,CAAtB,EAJqB,EAKrB,EAAE,MAAM,KAAR,EAAe,OAAO,CAAtB,EALqB,CAAhB,CAAP;AAOD","file":"datasource.js","sourcesContent":["export class ChartMogulDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.url = instanceSettings.url;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n    const noData = this.q.when([]);\n\n    if (!Array.isArray(options.targets) || options.targets.length === 0) {\n      return noData;\n    }\n\n    const target = options.targets[0].target;\n\n    if (!target) {\n      return noData;\n    }\n\n    const query = {\n      'start-date': options.range.from.format(),\n      'end-date': options.range.to.format()\n    };\n\n    const querystring = Object.keys(query)\n      .map(key => key + '=' + query[key])\n      .join('&');\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: this.url + '/metrics/' + target + '?' + querystring\n      })\n      .then(res => {\n        return {\n          data: [\n            {\n              target,\n              datapoints: res.data.entries.map(entry => {\n                return [\n                  Math.round(Number(entry[target]) / 100),\n                  new Date(entry.date).getTime()\n                ];\n              })\n            }\n          ]\n        };\n      });\n  }\n\n  testDatasource() {\n    return this.backendSrv\n      .datasourceRequest({\n        url: this.url + '/ping'\n      })\n      .then(response => {\n        if (response.status === 200) {\n          return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n        }\n\n        return {\n          status: \"error\",\n          message: \"Got an HTTP error. Code \" + response.status\n        };\n      });\n  }\n\n  metricFindQuery(options) {\n    return Promise.resolve([\n      { text: 'mrr', value: 0 },\n      { text: 'arr', value: 1 },\n      { text: 'arpa', value: 2 },\n      { text: 'asp', value: 3 },\n      { text: 'ltv', value: 4 }\n    ]);\n  }\n}\n"]}